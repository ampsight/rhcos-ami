---
# tasks file for rhcos-ami

# Set a large timeout as it could take awhile to download the file
- name: Download the VMDK file
  get_url:
    url: "{{ base_url }}/{{ ocp_maj_ver }}/{{ ocp_min_ver }}/rhcos-{{ ocp_min_ver }}-x86_64-aws.x86_64.vmdk.gz"
    dest: "{{ vmdk_tmp }}"
    mode: '0644'
    timeout: 600
  tags:
    - download

# EC2 Import Snapshot will not take a compressed archive like gzip
- name: Decompress the VMDK file
  command: gunzip "{{ vmdk_tmp }}/rhcos-{{ ocp_min_ver }}-x86_64-aws.x86_64.vmdk.gz"
  tags:
    - decompress

# TODO: Hardcoded to put the vmdk into the root of the S3 bucket.
#       Update role to support non-root directory level
- name: Upload VMDK to S3 Bucket
  aws_s3:
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
    bucket: "{{ s3_bucket }}"
    src: "{{ vmdk_tmp }}/rhcos-{{ ocp_min_ver }}-x86_64-aws.x86_64.vmdk"
    object: "/rhcos-{{ ocp_min_ver }}-x86_64-aws.x86_64.vmdk"
    mode: put
    overwrite: true
  tags:
    - upload

# This requires that your IAM user is allowed to create the role
# This step can be skipped if the role already exists
- name: Create VMImport Role in AWS
  import_role:
    name: rubrik-devops.aws-vmimport-role
  vars:
    s3_bucket_name: "{{ s3_bucket }}"
    s3_bucket_arn: "arn:aws:s3:::{{  s3_bucket }}"
  when: (create_role | bool)

- name: Create JSON file for use with importing snapshot
  template:
    src: containers.json.j2
    dest: /tmp/containers.json

# TODO: need to poll until the import is complete which might take awhile
- name: Import Snapshot from RHCOS VMDK in S3
  command: aws ec2 import-snapshot --description "Red Hat CoreOS {{ ocp_min_ver }} VMDK" --disk-container "file:///tmp/containers.json"
  register: import_snapshot

- name: Register the import snapshot Id
  command: aws ec2 describe-import-snapshot-tasks --output text --query 'ImportSnapshotTasks[*].ImportTaskId'
  register: snapshot_id

# - debug:
#    var: import_snapshot

- name: Register AMI against the snapshot
  ec2_ami:
    name: "rhcos-{{ ocp_min_ver }}-x86_64"
    state: present
    architecture: x86_64
    virtualization_type: hvm
    root_device_name: /dev/xvda
    wait: true
    device_mapping:
      - device_name: /dev/xvda
        volume_size: 16
        delete_on_termination: true
        volume_type: gp2
# TODO: There should be an ephemeral device on /dev/xvdb
#       but the module doesn't appear to support that yet.
#      - device_name: /dev/xvdb
#        no_device: True
  tags:
    - register
